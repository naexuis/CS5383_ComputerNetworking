# automatically generated by the FlatBuffers compiler, do not modify

# namespace: CustomAppProto

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Veg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Veg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVeg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Veg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Veg
    def Vtype(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Veg
    def Vquantity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def VegStart(builder):
    builder.StartObject(2)

def Start(builder):
    VegStart(builder)

def VegAddVtype(builder, vtype):
    builder.PrependInt8Slot(0, vtype, 0)

def AddVtype(builder, vtype):
    VegAddVtype(builder, vtype)

def VegAddVquantity(builder, vquantity):
    builder.PrependFloat32Slot(1, vquantity, 0.0)

def AddVquantity(builder, vquantity):
    VegAddVquantity(builder, vquantity)

def VegEnd(builder):
    return builder.EndObject()

def End(builder):
    return VegEnd(builder)
