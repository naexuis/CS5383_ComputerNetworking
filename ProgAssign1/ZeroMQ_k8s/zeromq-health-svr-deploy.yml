---
# CS4383/5383: Computer Networks
# Author: Aniruddha Gokhale
# Created: Fall 2023
#
# This is a declarative approach to describe a Kubernetes based
# deployment for a corresponding service.
#
# See https://kubernetes.io/docs/concepts/workloads/controllers/deployment/ for more details.

apiVersion: apps/v1  # as required by K8s
kind: Deployment         # Our pod is of the deployment type (because it is a long running server)
metadata:
  namespace: cluster1-ol-team2   # deploy in this namespace
  name: zeromq-health-svr-deploy   # some name for this deployment
  labels:
    app: zeromq-health-svr-app  # use the same name here that we used in the service declaration as we we need these two to match
spec:                     # This is the specification where we can even put the number of replicas
  replicas: 1             # default is 1
  selector:
    matchLabels:
      app: zeromq-health-svr-app     # we use same matching label
  minReadySeconds: 5  # if anything crashes before 5 secs, the deployment is not
                          # considered as ready and available. Default value is 0
  template:               # Specified info needed to run the pod and what runs in the pod
    metadata:
      labels:
        app: zeromq-health-svr-app        # some label to give to this pod (see the matching label above)
    spec:                 # actual specification of the pod
      hostname: zeromq-health-svr-host   # we ask for a special host name so it available to other frontends
      containers:
        - name: zeromq-svr-container   # container name. Not needed/
          image: naexuis/vu_zeromq_flatbuffers # Either from hub.docker (default) or some publicly accessible URL like your github repo or a private registry
          ports:            
            - containerPort: 5555  # port on which the container listens on
          imagePullPolicy: Always   # The following forces the node to pull the image if not locally available.
          # The following is the command line to run the iperf3 command as a server
          command: ["/usr/bin/python3", "-u", "/work/tcp_server_health.py"]
          #args: ["tcp_server_health.py"] # arguments
#      restartPolicy: Always # this is the default. Basically, if the pod fails, K8s will restart it.
...
