# automatically generated by the FlatBuffers compiler, do not modify

# namespace: CustomAppProto

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class HealthMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HealthMessage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHealthMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # HealthMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HealthMessage
    def SeqNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # HealthMessage
    def Ts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # HealthMessage
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # HealthMessage
    def Dispenser(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # HealthMessage
    def Icemaker(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HealthMessage
    def Lightbulb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # HealthMessage
    def FridgeTemp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HealthMessage
    def FreezerTemp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HealthMessage
    def SensorStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def HealthMessageStart(builder):
    builder.StartObject(9)

def Start(builder):
    HealthMessageStart(builder)

def HealthMessageAddSeqNo(builder, seqNo):
    builder.PrependUint32Slot(0, seqNo, 0)

def AddSeqNo(builder, seqNo):
    HealthMessageAddSeqNo(builder, seqNo)

def HealthMessageAddTs(builder, ts):
    builder.PrependFloat64Slot(1, ts, 0.0)

def AddTs(builder, ts):
    HealthMessageAddTs(builder, ts)

def HealthMessageAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    HealthMessageAddName(builder, name)

def HealthMessageAddDispenser(builder, dispenser):
    builder.PrependInt8Slot(3, dispenser, 0)

def AddDispenser(builder, dispenser):
    HealthMessageAddDispenser(builder, dispenser)

def HealthMessageAddIcemaker(builder, icemaker):
    builder.PrependInt32Slot(4, icemaker, 0)

def AddIcemaker(builder, icemaker):
    HealthMessageAddIcemaker(builder, icemaker)

def HealthMessageAddLightbulb(builder, lightbulb):
    builder.PrependInt8Slot(5, lightbulb, 0)

def AddLightbulb(builder, lightbulb):
    HealthMessageAddLightbulb(builder, lightbulb)

def HealthMessageAddFridgeTemp(builder, fridgeTemp):
    builder.PrependInt32Slot(6, fridgeTemp, 0)

def AddFridgeTemp(builder, fridgeTemp):
    HealthMessageAddFridgeTemp(builder, fridgeTemp)

def HealthMessageAddFreezerTemp(builder, freezerTemp):
    builder.PrependInt32Slot(7, freezerTemp, 0)

def AddFreezerTemp(builder, freezerTemp):
    HealthMessageAddFreezerTemp(builder, freezerTemp)

def HealthMessageAddSensorStatus(builder, sensorStatus):
    builder.PrependInt8Slot(8, sensorStatus, 0)

def AddSensorStatus(builder, sensorStatus):
    HealthMessageAddSensorStatus(builder, sensorStatus)

def HealthMessageEnd(builder):
    return builder.EndObject()

def End(builder):
    return HealthMessageEnd(builder)
