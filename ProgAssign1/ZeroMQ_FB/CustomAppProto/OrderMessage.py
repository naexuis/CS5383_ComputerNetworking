# automatically generated by the FlatBuffers compiler, do not modify

# namespace: CustomAppProto

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OrderMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OrderMessage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOrderMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # OrderMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OrderMessage
    def SeqNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # OrderMessage
    def Ts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # OrderMessage
    def Vl(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from CustomAppProto.Veg import Veg
            obj = Veg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OrderMessage
    def VlLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OrderMessage
    def VlIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # OrderMessage
    def Cl(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from CustomAppProto.CanDrink import CanDrink
            obj = CanDrink()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OrderMessage
    def ClLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OrderMessage
    def ClIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # OrderMessage
    def Bl(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from CustomAppProto.BottleDrink import BottleDrink
            obj = BottleDrink()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OrderMessage
    def BlLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OrderMessage
    def BlIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # OrderMessage
    def Ml(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from CustomAppProto.Milk import Milk
            obj = Milk()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OrderMessage
    def MlLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OrderMessage
    def MlIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # OrderMessage
    def Yl(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from CustomAppProto.Bread import Bread
            obj = Bread()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OrderMessage
    def YlLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OrderMessage
    def YlIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # OrderMessage
    def Xl(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from CustomAppProto.Meat import Meat
            obj = Meat()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # OrderMessage
    def XlLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OrderMessage
    def XlIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def OrderMessageStart(builder):
    builder.StartObject(8)

def Start(builder):
    OrderMessageStart(builder)

def OrderMessageAddSeqNo(builder, seqNo):
    builder.PrependUint32Slot(0, seqNo, 0)

def AddSeqNo(builder, seqNo):
    OrderMessageAddSeqNo(builder, seqNo)

def OrderMessageAddTs(builder, ts):
    builder.PrependFloat64Slot(1, ts, 0.0)

def AddTs(builder, ts):
    OrderMessageAddTs(builder, ts)

def OrderMessageAddVl(builder, vl):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(vl), 0)

def AddVl(builder, vl):
    OrderMessageAddVl(builder, vl)

def OrderMessageStartVlVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartVlVector(builder, numElems: int) -> int:
    return OrderMessageStartVlVector(builder, numElems)

def OrderMessageAddCl(builder, cl):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(cl), 0)

def AddCl(builder, cl):
    OrderMessageAddCl(builder, cl)

def OrderMessageStartClVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartClVector(builder, numElems: int) -> int:
    return OrderMessageStartClVector(builder, numElems)

def OrderMessageAddBl(builder, bl):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(bl), 0)

def AddBl(builder, bl):
    OrderMessageAddBl(builder, bl)

def OrderMessageStartBlVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartBlVector(builder, numElems: int) -> int:
    return OrderMessageStartBlVector(builder, numElems)

def OrderMessageAddMl(builder, ml):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(ml), 0)

def AddMl(builder, ml):
    OrderMessageAddMl(builder, ml)

def OrderMessageStartMlVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMlVector(builder, numElems: int) -> int:
    return OrderMessageStartMlVector(builder, numElems)

def OrderMessageAddYl(builder, yl):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(yl), 0)

def AddYl(builder, yl):
    OrderMessageAddYl(builder, yl)

def OrderMessageStartYlVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartYlVector(builder, numElems: int) -> int:
    return OrderMessageStartYlVector(builder, numElems)

def OrderMessageAddXl(builder, xl):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(xl), 0)

def AddXl(builder, xl):
    OrderMessageAddXl(builder, xl)

def OrderMessageStartXlVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartXlVector(builder, numElems: int) -> int:
    return OrderMessageStartXlVector(builder, numElems)

def OrderMessageEnd(builder):
    return builder.EndObject()

def End(builder):
    return OrderMessageEnd(builder)
